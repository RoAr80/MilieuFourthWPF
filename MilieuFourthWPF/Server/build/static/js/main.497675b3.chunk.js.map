{"version":3,"sources":["components/Button.js","components/RoArEditor.js","fontawesome.js","App.js","reportWebVitals.js","index.js"],"names":["Button","active","children","onMouseDown","ButtonEndStyle","className","event","withImages","editor","insertData","isVoid","isInline","normalizeNode","element","type","data","text","getData","files","elem","htmlString","div","document","createElement","innerHTML","trim","firstChild","createElementFromHTML","length","file","reader","FileReader","split","addEventListener","url","result","insertImage","readAsDataURL","nodeName","isMarkActive","format","marks","Editor","Leaf","attributes","leaf","bold","italic","underline","image","Transforms","insertNodes","collapse","edge","ReactEditor","focus","ImageElement","useEditor","stateOnDragStart","stateOnDragEnd","contentEditable","src","style","display","width","height","onDragStart","onDragEndCapture","range","findEventRange","anchor","offset","path","delete","at","reverse","MarkButton","icon","useSlate","preventDefault","removeMark","addMark","toggleMark","RoArEditor","useMemo","withHistory","withReact","createEditor","React","useState","value","setValue","renderElement","useCallback","props","renderLeaf","onChange","v","console","log","placeholder","library","add","faBold","faItalic","faUnderline","App","marginLeft","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.497675b3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './css/Button.css'\r\n\r\nfunction Button({active, children, onMouseDown}){\r\n    const isActive = active ? \"ActiveButton\" : \"\";\r\n    const ButtonEndStyle = `DefaultButton ${isActive}`\r\n    return (\r\n        <button className={ButtonEndStyle} onMouseDown={event => onMouseDown(event)}>{children} </button>\r\n    )\r\n}\r\n\r\nexport default Button;","import React, { useEffect, useMemo, useState, useCallback } from 'react';\r\n\r\nimport {\r\n    createEditor,\r\n    Editor,\r\n    Transforms,\r\n    Element,\r\n    SelectionOperation,\r\n    Range,\r\n    Node,\r\n    PointRef,\r\n    Text,\r\n    Point\r\n} from 'slate';\r\n\r\nimport { withHistory } from 'slate-history';\r\n\r\nimport imageExtensions from 'image-extensions';\r\nimport isUrl from 'is-url-superb';\r\n// import imageExtensions from 'image-extensions'\r\n\r\n\r\nimport {\r\n    Slate,\r\n    Editable,\r\n    ReactEditor,\r\n    useEditor,\r\n    useSlate,\r\n    useSelected,\r\n    useFocused,\r\n    withReact,\r\n    DefaultElement,\r\n} from 'slate-react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport Button from './Button';\r\nimport \"./css/RoArEditor.css\"\r\n\r\n\r\nfunction  RoArEditor(){\r\n    \r\n    \r\n    const editor = useMemo(() => withHistory(withImages(withReact(createEditor()))), []);    \r\n    \r\n    \r\n    \r\n    const [value, setValue] = React.useState([\r\n      {\r\n        type: 'paragraph',\r\n        children: [{ text: '' }],\r\n      },\r\n    ]);\r\n\r\n    const renderElement = useCallback(props =>{        \r\n        switch(props.element.type){\r\n            case 'image':\r\n                return <ImageElement {...props} />\r\n            default:\r\n                return <DefaultElement {...props} />\r\n        }\r\n    })\r\n\r\n    const renderLeaf = useCallback(props => <Leaf {...props} />, [])\r\n    \r\n    return (\r\n        <Slate\r\n            editor={editor}\r\n            value={value}\r\n            onChange={(v) => setValue(v)}                      \r\n        >\r\n          <div className=\"Editor\">\r\n            <MarkButton format=\"bold\" icon=\"bold\"/>\r\n            <MarkButton format=\"italic\" icon=\"italic\"/>\r\n            <MarkButton format=\"underline\" icon=\"underline\"/>\r\n            <Editable\r\n                // onLoad={event => ReactEditor.focus(editor)}\r\n                onMouseDown={() => console.log(\"modus\")}\r\n                renderLeaf={renderLeaf}                \r\n                renderElement={renderElement}\r\n                placeholder=\"Enter text here...\"\r\n                />\r\n          </div>\r\n\r\n        </Slate>\r\n    )\r\n    \r\n}\r\n\r\nconst withImages = editor => {\r\n    \r\n    const { insertData, isVoid, isInline, normalizeNode } = editor\r\n         \r\n    editor.isVoid = element => {\r\n        return element.type === 'image' ? true : isVoid(element)\r\n    }\r\n\r\n    editor.isInline = element => {\r\n        return element.type === 'image' ? true : isInline(element)\r\n    }\r\n\r\n\r\n    editor.insertData = data => {\r\n        const text = data.getData('text/plain')\r\n        const { files } = data\r\n        const texthtml = data.getData('text/html');\r\n        const elem = createElementFromHTML(texthtml);\r\n        \r\n        if (files && files.length > 0) {\r\n            for (const file of files) {\r\n                const reader = new FileReader()\r\n                const [mime] = file.type.split('/')\r\n\r\n                if (mime === 'image') {\r\n                    reader.addEventListener('load', () => {\r\n                        const url = reader.result;                            \r\n                        insertImage(editor, url)\r\n                    })\r\n\r\n                    reader.readAsDataURL(file)\r\n                }\r\n            }\r\n        } else if (elem.nodeName === \"IMG\") {                \r\n            insertImage(editor, text);\r\n            \r\n        } else {\r\n            insertData(data)\r\n        }                \r\n    }            \r\n\r\n    return editor\r\n}\r\n\r\nfunction createElementFromHTML(htmlString) {\r\n    var div = document.createElement('div');\r\n    div.innerHTML = htmlString.trim();\r\n    // Change this to div.childNodes to support multiple top-level nodes\r\n    return div.firstChild; \r\n  }\r\n\r\nconst isImageUrl = url => {\r\n    if (!url) return false\r\n    if (!isUrl(url)) return false\r\n    const ext = new URL(url).pathname.split('.').pop()\r\n    return imageExtensions.includes(ext)\r\n}\r\n\r\nconst toggleMark = (editor, format) => {\r\n  const isActive = isMarkActive(editor, format)  \r\n  if (isActive) {\r\n    Editor.removeMark(editor, format)\r\n  } else {\r\n    Editor.addMark(editor, format, true)\r\n  }\r\n}\r\n\r\nconst isMarkActive = (editor, format) => {\r\n  const marks = Editor.marks(editor)  \r\n  return marks ? marks[format] === true : false\r\n}\r\n\r\nconst Leaf = ({ attributes, children, leaf }) => {\r\n  if (leaf.bold) {\r\n    children = <strong>{children}</strong>\r\n  }\r\n\r\n  if (leaf.italic) {\r\n    children = <em>{children}</em>\r\n  }\r\n\r\n  if (leaf.underline) {\r\n    children = <u>{children}</u>\r\n  }\r\n\r\n  return <span {...attributes}>{children}</span>\r\n}\r\n\r\nconst insertImage = (editor, url) => {\r\n    const text = { text: '' }\r\n    const image =  { type: 'image', url, children: [text] }\r\n    Transforms.insertNodes(editor, image);\r\n    Transforms.collapse(editor, {edge: 'start'});\r\n    ReactEditor.focus(editor);\r\n}\r\n\r\nconst ImageElement = ({attributes, children, element}) => {\r\n    const editor = useEditor();    \r\n\r\n    const cssString = { display: \"inline-block\", width: \"300px\", height: \"auto\"};\r\n\r\n    let stateOnDragStart = '';\r\n    let stateOnDragEnd = '';\r\n    // let startedEvRange = [];\r\n\r\n    const onDragEnded = event =>{        \r\n        stateOnDragEnd = editor.children;        \r\n\r\n        let range = ReactEditor.findEventRange(editor, event);        \r\n        if(stateOnDragStart !== stateOnDragEnd)\r\n        {\r\n            if(range.anchor.offset === 0 && range.anchor.path[1] !== 0)\r\n            {\r\n                Transforms.delete(editor, {at:{path: range.anchor.path, offset: range.anchor.offset}, reverse: true})\r\n            }\r\n            else{\r\n                Transforms.delete(editor, {at:{path: range.anchor.path, offset: range.anchor.offset}});\r\n            }\r\n        }                \r\n    }\r\n\r\n    const onDragStarted = event => {        \r\n        stateOnDragStart = editor.children;              \r\n    }\r\n\r\n  return (\r\n    <span {...attributes}>\r\n      <span contentEditable={false}>\r\n        <img                   \r\n            src= {element.url}\r\n            style={cssString}\r\n            onDragStart = {onDragStarted}\r\n            onDragEndCapture = {onDragEnded}\r\n            onMouseDown = {event => {\r\n                Transforms.collapse(editor, {edge: 'start'});                                \r\n            }}\r\n\r\n        />\r\n      </span>\r\n      {children}&nbsp;\r\n    </span>\r\n  )\r\n}\r\n\r\nconst MarkButton = ({ format, icon }) => {\r\n    const editor = useSlate()\r\n    return (\r\n      <Button\r\n        active={isMarkActive(editor, format)}\r\n        onMouseDown={event => {\r\n          event.preventDefault();          \r\n          toggleMark(editor, format)\r\n        }}\r\n      >\r\n        <FontAwesomeIcon icon={icon}/>\r\n      </Button>\r\n    )\r\n  }\r\n\r\nexport default RoArEditor;","// import the library\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\n\r\n// import your icons\r\nimport { faBold, faItalic, faUnderline} from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(\r\n    faBold,\r\n    faItalic,\r\n    faUnderline,    \r\n)","import RoArEditor from './components/RoArEditor';\nimport \"./fontawesome\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <RoArEditor/>\n      <RoArEditor/>\n      <button style={{marginLeft: \"10px\"}} >Create</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}